#As previous level we got a token file and a binary, but this time we can read the file

cat token
>>> f4kmm6p|=�p�n��DB�Du{��

#We easily see that the token is encrypted with all those glitched char, lets try to combine it with the binary 

./level09 ./token
>>> .0vrojt

#The output is really weird if you compare with the content of token, especially when you look at his size
# I tried to ltrace the binary but it is protected
# however, if you look at the previous output, it has the same size as the string "./token"

#So I tried to directly cat the content through a pipe

cat ./token | ./level09
>>> You need to provied only one arg.

# But all thos glitched char seems to make it bug

# After trying many input to reverse Engineer the algorithm, I'm sure that this binary encrypt or decrypt the string passed as parameter 
# After many tries, those specific input helped me to find how it work

./level09 aaaa
>>> abcd
./level09 bbbb
>>> bcde

#We clearly see that for a char n, with n the position in the string (first is zero), it does +n to his ascii value
#Its an encrypting algorithm

#Lets make a little tool who substract instead of adding to reverse the encryption

void main(int ac, char **av)
{
	char buffer[1000];
	int fd = open(av[1], 0x0000); // 0x0000 = O_RDONLY qui n'est pas defini sur la VM
	int i = 0;

	read(fd, buffer, 999);
	buffer[999] = '\0';

	while(buffer[i] != '\0')
	{
		buffer[i] -= i;
		i++;
	}
	printf("%s\n", buffer);
}

#compile and run

gcc main.c 
./a.out ~/token
>>>f3iji1ju5yuevaus41q1afiuq�

#Let's copy everything before the glitch char and try to connect to flag09

su flag09
f3iji1ju5yuevaus41q1afiuq

getflag
>>> Check flag.Here is your token : s5cAJpM8ev6XHw998pRWG728z